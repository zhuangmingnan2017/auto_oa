<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<!-- sends logs to logback-beagle>
	<consolePlugin / -->

	<!-- set the logging path -->
	<property name="LOG_HOME" value="/data/logs/autooa" />

	<!-- 日志格式 -->
	<property name="CONSOLE_LOG_PATTERN"
			  value="%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%15.15t] %-40.40logger{39} : %m%n" />


	<!-- Console 输出设置 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<withJansi>false</withJansi>
		<encoder>
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
			<charset>utf8</charset>
		</encoder>
	</appender>

	<!-- File Appender -->
	<appender name="WEB_DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
		</filter>

		<!--<file>${LOG_HOME}/DEBUG.%d{yyyyMMdd}.log</file>-->

		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--定义了日志的切分方式——把每一天的日志归档到一个文件中-->
			<fileNamePattern>${LOG_HOME}/DEBUG.%d{yyyyMMdd}.log</fileNamePattern>
			<!--表示只保留最近7天的日志-->
			<maxHistory>7</maxHistory>
			<!--指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志-->
			<!--<totalSizeCap>1GB</totalSizeCap>-->
		</rollingPolicy>
		<encoder>
			<!--日志输出格式-->
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
		</encoder>
	</appender>

	<appender name="WEB_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
		</filter>
		<!--<file>${LOG_HOME}/INFO.%d{yyyyMMdd}.log</file>-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--定义了日志的切分方式——把每一天的日志归档到一个文件中-->
			<fileNamePattern>${LOG_HOME}/INFO.%d{yyyyMMdd}.log</fileNamePattern>
			<!--表示只保留最近7天的日志-->
			<maxHistory>7</maxHistory>
			<!--指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志-->
			<!--<totalSizeCap>1GB</totalSizeCap>-->
		</rollingPolicy>
		<encoder>
			<!--日志输出格式-->
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
		</encoder>
	</appender>

	<!-- special level : range -->
	<appender name="WEB_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
		</filter>
		<!--<file>${LOG_HOME}/ERROR.%d{yyyyMMdd}.log</file>-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--定义了日志的切分方式——把每一天的日志归档到一个文件中-->
			<fileNamePattern>${LOG_HOME}/ERROR.%d{yyyyMMdd}.log</fileNamePattern>
			<!--表示只保留最近7天的日志-->
			<maxHistory>7</maxHistory>
			<!--指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志-->
			<!--<totalSizeCap>1GB</totalSizeCap>-->
		</rollingPolicy>
		<encoder>
			<!--日志输出格式-->
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
		</encoder>
	</appender>

	<!--additivity属性为false，表示此loger的打印信息不再向上级传递，改成additivity="true"的话，就会打印两次，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次-->
	<logger name="com.idohoo" level="DEBUG" additivity="false">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="WEB_DEBUG" />
		<appender-ref ref="WEB_INFO" />
		<appender-ref ref="WEB_ERROR" />
	</logger>

	<logger name="org.mybatis" level="DEBUG" additivity="false">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="WEB_DEBUG" />
	</logger>

	<logger name="redis.clients" level="DEBUG" additivity="false">
		<appender-ref ref="WEB_DEBUG" />
	</logger>

    <logger name="com.aliyun.oss" level="INFO" additivity="false">
        <appender-ref ref="WEB_INFO" />
    </logger>

	<logger name="org.apache.http" level="INFO" additivity="false">
		<appender-ref ref="WEB_INFO" />
	</logger>

    <logger name="com.aliyun.openservices.ons" level="INFO" additivity="false">
        <appender-ref ref="WEB_INFO" />
    </logger>

	<logger name="com.idohoo.o2o.gts.aspect" level="INFO" >
		<appender-ref ref="WEB_INFO" />
	</logger>

	<logger name="com.idhoo.dhutil.mybatis" level="INFO" >
        <appender-ref ref="WEB_INFO" />
    </logger>

    <logger name="org.springframework.jdbc.datasource" level="INFO">
		<appender-ref ref="WEB_INFO" />
	</logger>

	<logger name="org.springframework.beans.factory.support" level="INFO">
		<appender-ref ref="WEB_INFO" />
	</logger>

	<logger name="org.apache.commons.beanutils.converters" level="INFO">
		<appender-ref ref="WEB_INFO" />
	</logger>

	<!--用来指定最基础的日志输出级别，只有一个level属性-->
	<root level="DEBUG">
		<!--标识这个appender将会添加到这个loger-->
		<appender-ref ref="STDOUT" />
		<appender-ref ref="WEB_DEBUG" />
        <appender-ref ref="WEB_INFO" />
		<appender-ref ref="WEB_ERROR" />
	</root>
</configuration>